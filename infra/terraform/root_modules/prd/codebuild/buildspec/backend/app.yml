version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.10
    commands:
      - apt-get update
      - apt-get install -y jq
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - docker-compose -v
      - aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY_URL}
      - cat src/db/config/config.json
      - echo '{
                  "'$ENVIRONMENT'":{
                    "username":"'$DB_USER'",
                    "password":"'$DB_PASSWORD'",
                    "database":"'$DB_NAME'",
                    "host":"'$DB_HOST'",
                    "port":"'$DB_PORT'",
                    "dialect":"'$DB_DIALECT'"
                  }
                }' > src/db/config/config.json
      - cat src/db/config/config.json
      - echo '{
                 "'$ENVIRONMENT'":{
                    "userPoolId":"'$COGNITO_USER_POOL_ID'",
                    "appClientId":"'$COGNITO_APP_CLIENT_ID'",
                    "appClientSecret":"'$COGNITO_APP_CLIENT_SECRET'",
                   "bucketName":"'$COGNITO_BUCKET_NAME'"
                  }
                }' > src/services/aws/config/config.json
      - cat src/services/aws/config/config.json
  build:
    commands:
      - echo Building the Docker image...
      - docker-compose -f ${DOCKER_COMPOSE_FILE_NAME} build ${DOCKER_COMPOSE_SERVICE_NAME} --no-cache
      - export IMAGE_TAG=$(git rev-parse HEAD)
      - docker tag ${DOCKER_IMAGE_NAME}:latest ${ECR_REPOSITORY_URL}:${IMAGE_TAG}
      - echo Pushing the Docker image...
      - docker push ${ECR_REPOSITORY_URL}:${IMAGE_TAG}
  post_build:
    commands:
      - SRC_TASK_DEF=$(aws ecs list-task-definitions --family-prefix ${ECS_TASK_DEF_NAME} --sort DESC --max-items 1 | jq -r '.taskDefinitionArns[0]')
      - echo current task def ${SRC_TASK_DEF}
      - aws ecs describe-task-definition --task-definition ${SRC_TASK_DEF} --include TAGS | jq '.taskDefinition | del(.taskDefinitionArn, .status, .requiresAttributes, .compatibilities, .revision, .registeredAt, .registeredBy)' | jq '.containerDefinitions[0].image = "'${ECR_REPOSITORY_URL}:${IMAGE_TAG}'"' > tmp_taskdef.json
      - NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://${PWD}/tmp_taskdef.json | jq -r '.taskDefinition.taskDefinitionArn')
      - echo new task def ${NEW_TASK_DEF}
      - CURRENT_TASK_COUNT=$(aws ecs describe-services --cluster ${ECS_CLUSTER_ARN} --services ${ECS_SERVICE_ARN} | jq -r '.services[0].desiredCount')
      - bash -c "
        if [[ "$CURRENT_TASK_COUNT" -eq 0 ]]; then
          aws ecs update-service --cluster ${ECS_CLUSTER_ARN} --service ${ECS_SERVICE_ARN} --desired-count 1;
        fi"
      - aws ecs update-service --cluster ${ECS_CLUSTER_ARN} --service ${ECS_SERVICE_ARN} --task-definition ${NEW_TASK_DEF}
      - echo "Done! (wait a while to rolling update...)"
      #- aws ecs wait services-stable --cluster ${ECS_CLUSTER_ARN} --service ${ECS_SERVICE_ARN}
      - echo service is now available.
